<?php
/**
 * Created by PhpStorm.
 * Project: MobileCasino
 * Date: 12.03.2015
 * Time: 0:03
 */

namespace Jungle\Smart\Keyword;

use Jungle\Basic\ITransient;
use Jungle\Basic\Collection\OptionContainerTrait;


/**
 * Class Keyword
 * @package Jungle\Smart\Keyword
 *
 * Инстанциируется через метод instanceFromArray
 *
 */
abstract class Keyword implements ITransient , \Serializable{

	use OptionContainerTrait{
		OptionContainerTrait::setOption as protected _setOption;
	}

	/**
	 * @var Manager
	 */
	protected $manager;

	/**
	 * @var string
	 */
	protected $identifier;

	/**
	 * @var bool
	 */
	protected $dirty;

	/**
	 * @var bool
	 *
	 */
	protected $dummy;

	/**
	 * Final for not extending
	 */
	final public function __construct(){
		$this->setDirty(false);
	}

	/**
	 * Constructor and Restorator
	 */
	protected function onConstruct(){
		$this->setDirty(false);
	}

	/**
	 * @return string
	 */
	final public function getIdentifier(){
		return $this->identifier;
	}

	/**
	 * @param Keyword $with
	 * @return bool
	 */
	final public function compareIdentifiersWith($with){
		return $this->getManager()->compareIdentifiers($this->getIdentifier(),$with instanceof Keyword?$with->getIdentifier() :$with);
	}

	/**
	 * @param string $identifier
	 */
	final public function setIdentifier($identifier){
		if($identifier instanceof Keyword){
			$identifier = $identifier->getIdentifier();
		}
		if(!is_string($identifier)){
			throw new \InvalidArgumentException('Identifier must be string');
		}
		if($this->identifier!==$identifier){
			$this->setDirty(true);
			$this->identifier = $identifier;
		}
	}

	/**
	 * @return bool
	 */
	final public function isDirty(){
		return $this->dirty===true;
	}

	/**
	 * @param bool $state
	 */
	final public function setDirty($state = true){
		if($this->dirty!==$state){
			$this->dirty = $state===true;
			if(!$this->isDummy() && $this->dirty && ($manager = $this->getManager())){
				$manager->setDirty(true);
			}
		}
	}

	/**
	 * @return bool
	 */
	final public function isDummy(){
		return $this->dummy===true;
	}

	/**
	 * @param bool $dummy
	 */
	final public function setDummy($dummy = true){
		if($this->dummy!==$dummy){
			$oldDummy = $this->dummy;
			$this->dummy = $dummy===true;
			if($this->dummy===false && $oldDummy===true && $this->isDirty() && ($manager = $this->getManager())){
				$manager->setDirty(true);
			}
		}
	}

	/**
	 * @param Manager $manager
	 */
	final public function setManager(Manager $manager = null){
		$this->manager = $manager;
	}

	/**
	 * @return Manager
	 */
	public function getManager(){
		return $this->manager;
	}

	/**
	 * Clearing and saving
	 */
	public function __destruct(){
		if(!$this->isDummy() && $this->isDirty()){
			$manager = $this->getManager();
			if($manager){
				$store = $manager->getStorage();
				if($store){
					$store->save($this);
					$this->setDirty(false);
				}
			}
		}
	}

	/**
	 * @return string
	 */
	public function __toString(){
		return $this->getIdentifier();
	}

	/**
	 * @param $key
	 * @param $value
	 */
	public function setOption($key,$value){
		if($this->getOption($key)!==$value){
			$this->_setOption($key,$value);
			$this->setDirty(true);
		}
	}



	/** transport representation this object properties to simple array
	 * @return array
	 */
	public function toArray(){
		return [
			'identifier' => $this->getIdentifier(),
			'options' => $this->_OptionContainerTrait_options
		];
	}

	/** set object representation from array generated by method toArray()
	 * @param array $data
	 */
	public function fromArray(array $data){
		$this->setIdentifier($data['identifier']);
		if(is_array($data['options'])){
			foreach($data['options'] as $key => $opt){
				$this->setOption($key,$opt);
			}
		}
	}

	/** Pack this object to array data and class identifier this inheritor
	 * @param Keyword $instance
	 * @return array
	 */
	public static function instanceToData(Keyword $instance){
		return array_merge([
			'class' => get_class($instance)
		],$instance->toArray());
	}

	/** Restore packed state
	 * @param array $data
	 * @return Keyword
	 */
	public static function instanceFromData(array $data){
		if(isset($data['class'])){

			/** @var Keyword $class */
			/** @var Keyword $instance */
			$class = $data['class'];

			if(!is_a($class, __CLASS__, true)){
				throw new \LogicException(
					'Keyword::fromPacked Class "' . $class . '" must be instance of ' . __CLASS__ . ''
				);
			}

			if(!class_exists($class, true)){
				throw new \LogicException('Keyword::fromPacked Class "' . $class . '" not found');
			}
			$instance = new $class();
			$instance->fromArray($data);
			$instance->onConstruct();
			return $instance;

		}else{
			throw new \LogicException('fromPacked data not have class name representation');
		}
	}

	/**
	 * (PHP 5 &gt;= 5.1.0)<br/>
	 * String representation of object
	 * @link http://php.net/manual/en/serializable.serialize.php
	 * @return string the string representation of the object or null
	 */
	public function serialize(){
		return serialize($this->toArray());
	}

	/**
	 * (PHP 5 &gt;= 5.1.0)<br/>
	 * Constructs the object
	 * @link http://php.net/manual/en/serializable.unserialize.php
	 * @param string $serialized <p>
	 * The string representation of the object.
	 * </p>
	 * @return void
	 */
	public function unserialize($serialized){
		$data = unserialize($serialized);
		$this->fromArray($data);
		$this->onConstruct();
	}
}