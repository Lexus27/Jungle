<?php
/**
 * Created by Kutuzov Alexey Konstantinovich <lexus.1995@mail.ru>.
 * Author: Kutuzov Alexey Konstantinovich <lexus.1995@mail.ru>
 * Project: jungle
 * IDE: PhpStorm
 * Date: 12.09.2016
 * Time: 20:56
 */
namespace Jungle\Application {

	/**
	 * Class LinkGenerator
	 * @package Jungle\Application
	 */
	class LinkGenerator{

		/**
		 * TODO: Реализовать генерирования ссылок со следующими компонентами:
		 * Маршрутизатор,
		 * Глобальные параметры, которые требуется заключить в ссылку.
		 * Домен, Поддомен для генерирования абсолютной URL ссылки
		 * Домены должны как то отслеживаться в Маршрутизаторе.
		 *
		 * При разной схеме доменов, внутренняя система приложения должна оставаться неизменной
		 *
		 * С разных доменов лишь по разному обрабатываются PATTERNS
		 *
		 * Домен
		 *      Шаблон
		 *          Дополнительные Параметры
		 *              -> MCA
		 *      Шаблон
		 *          Дополнительные Параметры
		 *              -> MCA
		 *
		 * Поддомен
		 *      Шаблон
		 *          Дополнительные Параметры
		 *              -> MCA
		 *      Шаблон
		 *          Дополнительные Параметры
		 *              -> MCA
		 *
		 * Шаблон
		 *      Домен
		 *      Поддомен
		 *
		 * Система расчитывается с точки зрения "Маршрутов", а это несколько другая схема:
		 *
		 * Application:
		 *      Strategy(HTTP)
		 *          Router
		 *              Route(/user/{id}, user:index)
		 *              Route(/user/{id}, user:index)
		 *              Route(/user/{id}, user:index)
		 *              Route(/user/{id}, user:index)
		 *              Route(/user/{id}, user:index)
		 *              Route(/user/{id}, user:index)
		 *
		 *  Исходя из такой системы видно, что маршруты не работают с доменами
		 *      Как можно рассматривать понятие Домен с точки зрения системы приложения?
		 *      Можно использовать Модули, единица модуля представляет так-же 1 домен (Module: 'tech' = 'tech:user:index')
		 *
		 *      tech:user:index -> 'tech.jungle/user/{id}'
		 *
		 * Если подключать одно и то же приложение (1 ядро Application) в нескольких папках доменах (судя по серверу)
		 * то можно видеть что запросы расматриваются из одного законфигурированного приложения и поэтому в разных запросах будут
		 * разные домены, но пока приложение к этому не готово.
		 * Чтобы не плодить кучку маршрутов под разные домены можно предусмотреть иерархию вложенных контейнеров
		 *
		 *
		 * Маршрут может принимать несколько доменов, в последствии с помощью определенных правил можно направить домен на какой-то модуль, а групповым (множеству) маршрутов такой категории
		 * можно так-же дать общие правила для обработки разных значений маршрутов.
		 *
		 * Прослойка MCA Prepare Input
		 *
		 * Зачем?
		 *  Решить подготовку параметров для разных контроллеров,
		 *  через разные стратегии запроса, сбросив эту ответственность из маршрутизатора.
		 * Откуда брать параметры?
		 *      Стратегия запроса - Запрос
		 *      Маршрутизатор -> Параметры шаблона
		 * Откуда брать параметры для генерации ссылок?
		 *      Явно Переданные параметры для генерации
		 *          Параметры могут быть значениями полей объекта,
		 *          а значит объекты можно расщеплять по классам
		 *          (Аргументом могут быть объекты которые будут расщепляться)
		 *      Глобальная система параметров Extra Global
		 *      Локальная система параметров (параметры для локальный зоны - "МежЗапросы")
		 *
		 *
		 *
		 *
		 *
		 * PublicInput
		 *
		 */

		/**
		 * @param $reference
		 * @param $params
		 *
		 *
		 *
		 *
		 */
		public function generate($reference, $params){

		}


	}
}

